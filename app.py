import streamlit as st
from PIL import Image
import io
import zipfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TARGET_WIDTH = 1080
TARGET_HEIGHT = 1440
SCALE_FACTOR = 0.9
WHITE_THRESHOLD = 250  # –ø–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–æ–≥–æ" —Ñ–æ–Ω–∞

st.set_page_config(page_title="Uzum Image Resizer", layout="centered")
st.title("üñºÔ∏è Uzum Image Resizer")
st.caption("–î–æ–±–∞–≤–ª—è–µ—Ç –±–µ–ª—ã–π —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–µ–∑ –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞, –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∫–æ—Ä–µ–Ω—å ZIP.")

uploaded_files = st.file_uploader(
    "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, WEBP)",
    type=["jpg", "jpeg", "png", "webp"],
    accept_multiple_files=True
)

def has_white_corners(img: Image.Image) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ —á–µ—Ç—ã—Ä–µ —É–≥–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–∏ –∫ –±–µ–ª–æ–º—É."""
    rgb = img.convert("RGB")
    w, h = rgb.size
    for x, y in ((0,0), (w-1,0), (0,h-1), (w-1,h-1)):
        r, g, b = rgb.getpixel((x, y))
        # –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, —Å—á–∏—Ç–∞–µ–º —Ñ–æ–Ω –Ω–µ –±–µ–ª—ã–º
        if r < WHITE_THRESHOLD or g < WHITE_THRESHOLD or b < WHITE_THRESHOLD:
            return False
    return True

def process_image(img: Image.Image) -> Image.Image:
    """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç, –∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞–¥–¥–∏–Ω–≥."""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB (–Ω–∞ —Å–ª—É—á–∞–π PNG —Å –∞–ª—å—Ñ–∞)
    img = img.convert("RGB")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–∞–¥–¥–∏–Ω–≥
    need_padding = not has_white_corners(img)

    # –°–Ω–∞—á–∞–ª–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    max_w = int(TARGET_WIDTH * SCALE_FACTOR)
    max_h = int(TARGET_HEIGHT * SCALE_FACTOR)
    img.thumbnail((max_w, max_h), Image.LANCZOS)

    if need_padding:
        # –°–æ–∑–¥–∞—ë–º –±–µ–ª—ã–π —Ñ–æ–Ω –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        background = Image.new("RGB", (TARGET_WIDTH, TARGET_HEIGHT), "white")
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        offset = ((TARGET_WIDTH - img.width) // 2, (TARGET_HEIGHT - img.height) // 2)
        background.paste(img, offset)
        return background
    else:
        # –ë–µ–∑ –ø–∞–¥–¥–∏–Ω–≥–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return img

if uploaded_files:
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w") as zip_file:
        for uploaded_file in uploaded_files:
            original = Image.open(uploaded_file)
            processed = process_image(original)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_bytes = io.BytesIO()
            processed.save(img_bytes, format="JPEG", quality=95)
            img_bytes.seek(0)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤ ZIP
            clean_name = uploaded_file.name.rsplit(".", 1)[0]
            zip_path = f"{clean_name}_1080x1440.jpg"
            zip_file.writestr(zip_path, img_bytes.read())

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            st.image(processed, caption=zip_path, use_container_width=True)

    zip_buffer.seek(0)
    st.download_button(
        label="üì¶ –°–∫–∞—á–∞—Ç—å (–±–µ–∑ –ø–æ–¥–ø–∞–ø–æ–∫)",
        data=zip_buffer.getvalue(),
        file_name="uzum_flat.zip",
        mime="application/zip"
    )
